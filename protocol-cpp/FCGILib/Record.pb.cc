// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Record.proto

#include "Record.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fcgi {
class RecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Record>
      _instance;
} _Record_default_instance_;
}  // namespace fcgi
namespace protobuf_Record_2eproto {
void InitDefaultsRecordImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fcgi::_Record_default_instance_;
    new (ptr) ::fcgi::Record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgi::Record::InitAsDefaultInstance();
}

void InitDefaultsRecord() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordImpl);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, contentlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, paddinglength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, contentdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgi::Record, paddingdata_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::fcgi::Record)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgi::_Record_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "Record.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\014Record.proto\022\004fcgi\"\245\001\n\006Record\022\017\n\007versi"
      "on\030\001 \001(\005\022\014\n\004type\030\002 \001(\005\022\022\n\nrequest_id\030\003 \002"
      "(\005\022\020\n\010reserved\030\004 \001(\005\022\025\n\rcontentLength\030\005 "
      "\001(\005\022\025\n\rpaddingLength\030\006 \001(\005\022\023\n\013contentDat"
      "a\030\007 \001(\t\022\023\n\013paddingData\030\010 \001(\t"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 188);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Record.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_Record_2eproto
namespace fcgi {

// ===================================================================

void Record::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kVersionFieldNumber;
const int Record::kTypeFieldNumber;
const int Record::kRequestIdFieldNumber;
const int Record::kReservedFieldNumber;
const int Record::kContentLengthFieldNumber;
const int Record::kPaddingLengthFieldNumber;
const int Record::kContentDataFieldNumber;
const int Record::kPaddingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_Record_2eproto::InitDefaultsRecord();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgi.Record)
}
Record::Record(const Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contentdata()) {
    contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
  }
  paddingdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paddingdata()) {
    paddingdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paddingdata_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&paddinglength_) -
    reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
  // @@protoc_insertion_point(copy_constructor:fcgi.Record)
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paddingdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paddinglength_) -
      reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:fcgi.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  contentdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paddingdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  ::protobuf_Record_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Record_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Record& Record::default_instance() {
  ::protobuf_Record_2eproto::InitDefaultsRecord();
  return *internal_default_instance();
}

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgi.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!contentdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contentdata_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!paddingdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paddingdata_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paddinglength_) -
        reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgi.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 contentLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_contentlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contentlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 paddingLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_paddinglength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paddinglength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contentData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentdata().data(), static_cast<int>(this->contentdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgi.Record.contentData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string paddingData = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paddingdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgi.Record.paddingData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgi.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgi.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgi.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 request_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // optional int32 reserved = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved(), output);
  }

  // optional int32 contentLength = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contentlength(), output);
  }

  // optional int32 paddingLength = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->paddinglength(), output);
  }

  // optional string contentData = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgi.Record.contentData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contentdata(), output);
  }

  // optional string paddingData = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgi.Record.paddingData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->paddingdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgi.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgi.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 request_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // optional int32 reserved = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reserved(), target);
  }

  // optional int32 contentLength = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contentlength(), target);
  }

  // optional int32 paddingLength = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->paddinglength(), target);
  }

  // optional string contentData = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgi.Record.contentData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contentdata(), target);
  }

  // optional string paddingData = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgi.Record.paddingData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->paddingdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgi.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgi.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 request_id = 3;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string contentData = 7;
    if (has_contentdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentdata());
    }

    // optional string paddingData = 8;
    if (has_paddingdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paddingdata());
    }

    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 reserved = 4;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved());
    }

    // optional int32 contentLength = 5;
    if (has_contentlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contentlength());
    }

    // optional int32 paddingLength = 6;
    if (has_paddinglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paddinglength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgi.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgi.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgi.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgi.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contentdata();
      contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_paddingdata();
      paddingdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paddingdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00000040u) {
      contentlength_ = from.contentlength_;
    }
    if (cached_has_bits & 0x00000080u) {
      paddinglength_ = from.paddinglength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgi.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgi.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  using std::swap;
  contentdata_.Swap(&other->contentdata_);
  paddingdata_.Swap(&other->paddingdata_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(request_id_, other->request_id_);
  swap(reserved_, other->reserved_);
  swap(contentlength_, other->contentlength_);
  swap(paddinglength_, other->paddinglength_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_Record_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_Record_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fcgi

// @@protoc_insertion_point(global_scope)
