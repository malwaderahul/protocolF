// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#include "protocol.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace fcgiprotocol {
class BeginRequestDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<BeginRequest>
      _instance;
} _BeginRequest_default_instance_;
class MyPageContentDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<MyPageContent>
      _instance;
} _MyPageContent_default_instance_;
class ParamsDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Params>
      _instance;
} _Params_default_instance_;
class RecordDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Record>
      _instance;
} _Record_default_instance_;
class StdinDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<Stdin>
      _instance;
} _Stdin_default_instance_;
}  // namespace fcgiprotocol
namespace protobuf_protocol_2eproto {
void InitDefaultsBeginRequestImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fcgiprotocol::_BeginRequest_default_instance_;
    new (ptr) ::fcgiprotocol::BeginRequest();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgiprotocol::BeginRequest::InitAsDefaultInstance();
}

void InitDefaultsBeginRequest() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsBeginRequestImpl);
}

void InitDefaultsMyPageContentImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fcgiprotocol::_MyPageContent_default_instance_;
    new (ptr) ::fcgiprotocol::MyPageContent();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgiprotocol::MyPageContent::InitAsDefaultInstance();
}

void InitDefaultsMyPageContent() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsMyPageContentImpl);
}

void InitDefaultsParamsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  protobuf_protocol_2eproto::InitDefaultsMyPageContent();
  {
    void* ptr = &::fcgiprotocol::_Params_default_instance_;
    new (ptr) ::fcgiprotocol::Params();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgiprotocol::Params::InitAsDefaultInstance();
}

void InitDefaultsParams() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsParamsImpl);
}

void InitDefaultsRecordImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fcgiprotocol::_Record_default_instance_;
    new (ptr) ::fcgiprotocol::Record();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgiprotocol::Record::InitAsDefaultInstance();
}

void InitDefaultsRecord() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsRecordImpl);
}

void InitDefaultsStdinImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  ::google::protobuf::internal::InitProtobufDefaultsForceUnique();
#else
  ::google::protobuf::internal::InitProtobufDefaults();
#endif  // GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
  {
    void* ptr = &::fcgiprotocol::_Stdin_default_instance_;
    new (ptr) ::fcgiprotocol::Stdin();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fcgiprotocol::Stdin::InitAsDefaultInstance();
}

void InitDefaultsStdin() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &InitDefaultsStdinImpl);
}

::google::protobuf::Metadata file_level_metadata[5];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::BeginRequest, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::BeginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::BeginRequest, role_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::BeginRequest, flags_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::BeginRequest, reserved1_),
  1,
  2,
  0,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::MyPageContent, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::MyPageContent, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::MyPageContent, key_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::MyPageContent, value_),
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Params, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Params, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Params, paramvalues_),
  ~0u,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, version_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, request_id_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, reserved_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, contentlength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, paddinglength_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, contentdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Record, paddingdata_),
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  1,
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Stdin, _has_bits_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Stdin, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Stdin, contentdata_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::fcgiprotocol::Stdin, type_),
  0,
  1,
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 8, sizeof(::fcgiprotocol::BeginRequest)},
  { 11, 18, sizeof(::fcgiprotocol::MyPageContent)},
  { 20, 26, sizeof(::fcgiprotocol::Params)},
  { 27, 40, sizeof(::fcgiprotocol::Record)},
  { 48, 55, sizeof(::fcgiprotocol::Stdin)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgiprotocol::_BeginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgiprotocol::_MyPageContent_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgiprotocol::_Params_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgiprotocol::_Record_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&::fcgiprotocol::_Stdin_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "protocol.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 5);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\016protocol.proto\022\014fcgiprotocol\">\n\014BeginR"
      "equest\022\014\n\004role\030\001 \001(\005\022\r\n\005flags\030\002 \001(\005\022\021\n\tr"
      "eserved1\030\003 \001(\t\"+\n\rMyPageContent\022\013\n\003key\030\001"
      " \002(\t\022\r\n\005value\030\002 \002(\t\":\n\006Params\0220\n\013paramva"
      "lues\030\001 \003(\0132\033.fcgiprotocol.MyPageContent\""
      "\245\001\n\006Record\022\017\n\007version\030\001 \001(\005\022\014\n\004type\030\002 \001("
      "\005\022\022\n\nrequest_id\030\003 \002(\005\022\020\n\010reserved\030\004 \001(\005\022"
      "\025\n\rcontentLength\030\005 \001(\005\022\025\n\rpaddingLength\030"
      "\006 \001(\005\022\023\n\013contentData\030\007 \001(\t\022\023\n\013paddingDat"
      "a\030\010 \001(\t\"*\n\005Stdin\022\023\n\013contentData\030\001 \001(\t\022\014\n"
      "\004type\030\002 \001(\005*\266\001\n\013FCGI_Header\022\021\n\rBEGIN_REQ"
      "UEST\020\001\022\021\n\rABORT_REQUEST\020\002\022\017\n\013END_REQUEST"
      "\020\003\022\n\n\006PARAMS\020\004\022\t\n\005STDIN\020\005\022\n\n\006STDOUT\020\006\022\n\n"
      "\006STDERR\020\007\022\010\n\004DATA\020\010\022\016\n\nGET_VALUES\020\t\022\025\n\021G"
      "ET_VALUES_RESULT\020\n\022\020\n\014UNKNOWN_TYPE\020\013*B\n\014"
      "Header_Const\022\023\n\017NULL_REQUEST_ID\020\000\022\r\n\tVER"
      "SION_1\020\001\022\016\n\nHEADER_LEN\020\010*\034\n\013Conn_Status\022"
      "\r\n\tKEEP_CONN\020\001*6\n\tFCGI_Role\022\r\n\tRESPONDER"
      "\020\001\022\016\n\nAUTHORIZER\020\002\022\n\n\006FILTER\020\003*\\\n\017Protoc"
      "ol_Status\022\024\n\020REQUEST_COMPLETE\020\000\022\021\n\rCANT_"
      "MPX_CONN\020\001\022\016\n\nOVERLOADED\020\002\022\020\n\014UNKNOWN_RO"
      "LE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 844);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "protocol.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_protocol_2eproto
namespace fcgiprotocol {
const ::google::protobuf::EnumDescriptor* FCGI_Header_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[0];
}
bool FCGI_Header_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Header_Const_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[1];
}
bool Header_Const_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Conn_Status_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[2];
}
bool Conn_Status_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FCGI_Role_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[3];
}
bool FCGI_Role_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Protocol_Status_descriptor() {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_protocol_2eproto::file_level_enum_descriptors[4];
}
bool Protocol_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void BeginRequest::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BeginRequest::kRoleFieldNumber;
const int BeginRequest::kFlagsFieldNumber;
const int BeginRequest::kReserved1FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BeginRequest::BeginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsBeginRequest();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgiprotocol.BeginRequest)
}
BeginRequest::BeginRequest(const BeginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  reserved1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_reserved1()) {
    reserved1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserved1_);
  }
  ::memcpy(&role_, &from.role_,
    static_cast<size_t>(reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&role_)) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:fcgiprotocol.BeginRequest)
}

void BeginRequest::SharedCtor() {
  _cached_size_ = 0;
  reserved1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&role_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flags_) -
      reinterpret_cast<char*>(&role_)) + sizeof(flags_));
}

BeginRequest::~BeginRequest() {
  // @@protoc_insertion_point(destructor:fcgiprotocol.BeginRequest)
  SharedDtor();
}

void BeginRequest::SharedDtor() {
  reserved1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void BeginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeginRequest::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const BeginRequest& BeginRequest::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsBeginRequest();
  return *internal_default_instance();
}

BeginRequest* BeginRequest::New(::google::protobuf::Arena* arena) const {
  BeginRequest* n = new BeginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BeginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgiprotocol.BeginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!reserved1_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*reserved1_.UnsafeRawStringPointer())->clear();
  }
  if (cached_has_bits & 6u) {
    ::memset(&role_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flags_) -
        reinterpret_cast<char*>(&role_)) + sizeof(flags_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool BeginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgiprotocol.BeginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 role = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_role();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &role_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 flags = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_flags();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string reserved1 = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserved1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserved1().data(), static_cast<int>(this->reserved1().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.BeginRequest.reserved1");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgiprotocol.BeginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgiprotocol.BeginRequest)
  return false;
#undef DO_
}

void BeginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgiprotocol.BeginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->role(), output);
  }

  // optional int32 flags = 2;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flags(), output);
  }

  // optional string reserved1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserved1().data(), static_cast<int>(this->reserved1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.BeginRequest.reserved1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->reserved1(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgiprotocol.BeginRequest)
}

::google::protobuf::uint8* BeginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgiprotocol.BeginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 role = 1;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->role(), target);
  }

  // optional int32 flags = 2;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flags(), target);
  }

  // optional string reserved1 = 3;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserved1().data(), static_cast<int>(this->reserved1().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.BeginRequest.reserved1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->reserved1(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgiprotocol.BeginRequest)
  return target;
}

size_t BeginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgiprotocol.BeginRequest)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 7u) {
    // optional string reserved1 = 3;
    if (has_reserved1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserved1());
    }

    // optional int32 role = 1;
    if (has_role()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->role());
    }

    // optional int32 flags = 2;
    if (has_flags()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flags());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgiprotocol.BeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const BeginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const BeginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgiprotocol.BeginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgiprotocol.BeginRequest)
    MergeFrom(*source);
  }
}

void BeginRequest::MergeFrom(const BeginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgiprotocol.BeginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_reserved1();
      reserved1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.reserved1_);
    }
    if (cached_has_bits & 0x00000002u) {
      role_ = from.role_;
    }
    if (cached_has_bits & 0x00000004u) {
      flags_ = from.flags_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BeginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgiprotocol.BeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeginRequest::CopyFrom(const BeginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgiprotocol.BeginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeginRequest::IsInitialized() const {
  return true;
}

void BeginRequest::Swap(BeginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BeginRequest::InternalSwap(BeginRequest* other) {
  using std::swap;
  reserved1_.Swap(&other->reserved1_);
  swap(role_, other->role_);
  swap(flags_, other->flags_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata BeginRequest::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void MyPageContent::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyPageContent::kKeyFieldNumber;
const int MyPageContent::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyPageContent::MyPageContent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsMyPageContent();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgiprotocol.MyPageContent)
}
MyPageContent::MyPageContent(const MyPageContent& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_key()) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_value()) {
    value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:fcgiprotocol.MyPageContent)
}

void MyPageContent::SharedCtor() {
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

MyPageContent::~MyPageContent() {
  // @@protoc_insertion_point(destructor:fcgiprotocol.MyPageContent)
  SharedDtor();
}

void MyPageContent::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MyPageContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyPageContent::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MyPageContent& MyPageContent::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsMyPageContent();
  return *internal_default_instance();
}

MyPageContent* MyPageContent::New(::google::protobuf::Arena* arena) const {
  MyPageContent* n = new MyPageContent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyPageContent::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgiprotocol.MyPageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!key_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*key_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!value_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*value_.UnsafeRawStringPointer())->clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool MyPageContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgiprotocol.MyPageContent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), static_cast<int>(this->key().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.MyPageContent.key");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string value = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), static_cast<int>(this->value().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.MyPageContent.value");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgiprotocol.MyPageContent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgiprotocol.MyPageContent)
  return false;
#undef DO_
}

void MyPageContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgiprotocol.MyPageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.MyPageContent.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.MyPageContent.value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgiprotocol.MyPageContent)
}

::google::protobuf::uint8* MyPageContent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgiprotocol.MyPageContent)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), static_cast<int>(this->key().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.MyPageContent.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), static_cast<int>(this->value().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.MyPageContent.value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgiprotocol.MyPageContent)
  return target;
}

size_t MyPageContent::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fcgiprotocol.MyPageContent)
  size_t total_size = 0;

  if (has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  if (has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());
  }

  return total_size;
}
size_t MyPageContent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgiprotocol.MyPageContent)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());

    // required string value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyPageContent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgiprotocol.MyPageContent)
  GOOGLE_DCHECK_NE(&from, this);
  const MyPageContent* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MyPageContent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgiprotocol.MyPageContent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgiprotocol.MyPageContent)
    MergeFrom(*source);
  }
}

void MyPageContent::MergeFrom(const MyPageContent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgiprotocol.MyPageContent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
}

void MyPageContent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgiprotocol.MyPageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyPageContent::CopyFrom(const MyPageContent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgiprotocol.MyPageContent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyPageContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void MyPageContent::Swap(MyPageContent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyPageContent::InternalSwap(MyPageContent* other) {
  using std::swap;
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyPageContent::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Params::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Params::kParamvaluesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Params::Params()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsParams();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgiprotocol.Params)
}
Params::Params(const Params& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0),
      paramvalues_(from.paramvalues_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:fcgiprotocol.Params)
}

void Params::SharedCtor() {
  _cached_size_ = 0;
}

Params::~Params() {
  // @@protoc_insertion_point(destructor:fcgiprotocol.Params)
  SharedDtor();
}

void Params::SharedDtor() {
}

void Params::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Params::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Params& Params::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsParams();
  return *internal_default_instance();
}

Params* Params::New(::google::protobuf::Arena* arena) const {
  Params* n = new Params;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Params::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgiprotocol.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  paramvalues_.Clear();
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Params::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgiprotocol.Params)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .fcgiprotocol.MyPageContent paramvalues = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(input, add_paramvalues()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgiprotocol.Params)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgiprotocol.Params)
  return false;
#undef DO_
}

void Params::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgiprotocol.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fcgiprotocol.MyPageContent paramvalues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paramvalues_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->paramvalues(static_cast<int>(i)), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgiprotocol.Params)
}

::google::protobuf::uint8* Params::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgiprotocol.Params)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .fcgiprotocol.MyPageContent paramvalues = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->paramvalues_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->paramvalues(static_cast<int>(i)), deterministic, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgiprotocol.Params)
  return target;
}

size_t Params::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgiprotocol.Params)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // repeated .fcgiprotocol.MyPageContent paramvalues = 1;
  {
    unsigned int count = static_cast<unsigned int>(this->paramvalues_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          this->paramvalues(static_cast<int>(i)));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Params::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgiprotocol.Params)
  GOOGLE_DCHECK_NE(&from, this);
  const Params* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Params>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgiprotocol.Params)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgiprotocol.Params)
    MergeFrom(*source);
  }
}

void Params::MergeFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgiprotocol.Params)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  paramvalues_.MergeFrom(from.paramvalues_);
}

void Params::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgiprotocol.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Params::CopyFrom(const Params& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgiprotocol.Params)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Params::IsInitialized() const {
  if (!::google::protobuf::internal::AllAreInitialized(this->paramvalues())) return false;
  return true;
}

void Params::Swap(Params* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Params::InternalSwap(Params* other) {
  using std::swap;
  paramvalues_.InternalSwap(&other->paramvalues_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Params::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Record::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kVersionFieldNumber;
const int Record::kTypeFieldNumber;
const int Record::kRequestIdFieldNumber;
const int Record::kReservedFieldNumber;
const int Record::kContentLengthFieldNumber;
const int Record::kPaddingLengthFieldNumber;
const int Record::kContentDataFieldNumber;
const int Record::kPaddingDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsRecord();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgiprotocol.Record)
}
Record::Record(const Record& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contentdata()) {
    contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
  }
  paddingdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_paddingdata()) {
    paddingdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paddingdata_);
  }
  ::memcpy(&version_, &from.version_,
    static_cast<size_t>(reinterpret_cast<char*>(&paddinglength_) -
    reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
  // @@protoc_insertion_point(copy_constructor:fcgiprotocol.Record)
}

void Record::SharedCtor() {
  _cached_size_ = 0;
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paddingdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&paddinglength_) -
      reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:fcgiprotocol.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  contentdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  paddingdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Record& Record::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsRecord();
  return *internal_default_instance();
}

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgiprotocol.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(!contentdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*contentdata_.UnsafeRawStringPointer())->clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(!paddingdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
      (*paddingdata_.UnsafeRawStringPointer())->clear();
    }
  }
  if (cached_has_bits & 252u) {
    ::memset(&version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&paddinglength_) -
        reinterpret_cast<char*>(&version_)) + sizeof(paddinglength_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgiprotocol.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          set_has_version();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &version_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required int32 request_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          set_has_request_id();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &request_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 reserved = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {
          set_has_reserved();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reserved_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 contentLength = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          set_has_contentlength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contentlength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 paddingLength = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {
          set_has_paddinglength();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paddinglength_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string contentData = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentdata().data(), static_cast<int>(this->contentdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.Record.contentData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string paddingData = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_paddingdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.Record.paddingData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgiprotocol.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgiprotocol.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgiprotocol.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->version(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 request_id = 3;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->request_id(), output);
  }

  // optional int32 reserved = 4;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reserved(), output);
  }

  // optional int32 contentLength = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contentlength(), output);
  }

  // optional int32 paddingLength = 6;
  if (cached_has_bits & 0x00000080u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->paddinglength(), output);
  }

  // optional string contentData = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Record.contentData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->contentdata(), output);
  }

  // optional string paddingData = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Record.paddingData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->paddingdata(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgiprotocol.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgiprotocol.Record)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional int32 version = 1;
  if (cached_has_bits & 0x00000004u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->version(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000008u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 request_id = 3;
  if (cached_has_bits & 0x00000010u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->request_id(), target);
  }

  // optional int32 reserved = 4;
  if (cached_has_bits & 0x00000020u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reserved(), target);
  }

  // optional int32 contentLength = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contentlength(), target);
  }

  // optional int32 paddingLength = 6;
  if (cached_has_bits & 0x00000080u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->paddinglength(), target);
  }

  // optional string contentData = 7;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Record.contentData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contentdata(), target);
  }

  // optional string paddingData = 8;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->paddingdata().data(), static_cast<int>(this->paddingdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Record.paddingData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->paddingdata(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgiprotocol.Record)
  return target;
}

size_t Record::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgiprotocol.Record)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  // required int32 request_id = 3;
  if (has_request_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->request_id());
  }
  if (_has_bits_[0 / 32] & 15u) {
    // optional string contentData = 7;
    if (has_contentdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentdata());
    }

    // optional string paddingData = 8;
    if (has_paddingdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->paddingdata());
    }

    // optional int32 version = 1;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->version());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (_has_bits_[0 / 32] & 224u) {
    // optional int32 reserved = 4;
    if (has_reserved()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reserved());
    }

    // optional int32 contentLength = 5;
    if (has_contentlength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contentlength());
    }

    // optional int32 paddingLength = 6;
    if (has_paddinglength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paddinglength());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgiprotocol.Record)
  GOOGLE_DCHECK_NE(&from, this);
  const Record* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgiprotocol.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgiprotocol.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgiprotocol.Record)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 255u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contentdata();
      contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_paddingdata();
      paddingdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.paddingdata_);
    }
    if (cached_has_bits & 0x00000004u) {
      version_ = from.version_;
    }
    if (cached_has_bits & 0x00000008u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00000010u) {
      request_id_ = from.request_id_;
    }
    if (cached_has_bits & 0x00000020u) {
      reserved_ = from.reserved_;
    }
    if (cached_has_bits & 0x00000040u) {
      contentlength_ = from.contentlength_;
    }
    if (cached_has_bits & 0x00000080u) {
      paddinglength_ = from.paddinglength_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgiprotocol.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgiprotocol.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000010) != 0x00000010) return false;
  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  using std::swap;
  contentdata_.Swap(&other->contentdata_);
  paddingdata_.Swap(&other->paddingdata_);
  swap(version_, other->version_);
  swap(type_, other->type_);
  swap(request_id_, other->request_id_);
  swap(reserved_, other->reserved_);
  swap(contentlength_, other->contentlength_);
  swap(paddinglength_, other->paddinglength_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// ===================================================================

void Stdin::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Stdin::kContentDataFieldNumber;
const int Stdin::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Stdin::Stdin()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    ::protobuf_protocol_2eproto::InitDefaultsStdin();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:fcgiprotocol.Stdin)
}
Stdin::Stdin(const Stdin& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_contentdata()) {
    contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:fcgiprotocol.Stdin)
}

void Stdin::SharedCtor() {
  _cached_size_ = 0;
  contentdata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

Stdin::~Stdin() {
  // @@protoc_insertion_point(destructor:fcgiprotocol.Stdin)
  SharedDtor();
}

void Stdin::SharedDtor() {
  contentdata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Stdin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Stdin::descriptor() {
  ::protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const Stdin& Stdin::default_instance() {
  ::protobuf_protocol_2eproto::InitDefaultsStdin();
  return *internal_default_instance();
}

Stdin* Stdin::New(::google::protobuf::Arena* arena) const {
  Stdin* n = new Stdin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Stdin::Clear() {
// @@protoc_insertion_point(message_clear_start:fcgiprotocol.Stdin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(!contentdata_.IsDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited()));
    (*contentdata_.UnsafeRawStringPointer())->clear();
  }
  type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool Stdin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:fcgiprotocol.Stdin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string contentData = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contentdata()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->contentdata().data(), static_cast<int>(this->contentdata().length()),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fcgiprotocol.Stdin.contentData");
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          set_has_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:fcgiprotocol.Stdin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:fcgiprotocol.Stdin)
  return false;
#undef DO_
}

void Stdin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:fcgiprotocol.Stdin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contentData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Stdin.contentData");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->contentdata(), output);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        _internal_metadata_.unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:fcgiprotocol.Stdin)
}

::google::protobuf::uint8* Stdin::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:fcgiprotocol.Stdin)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional string contentData = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->contentdata().data(), static_cast<int>(this->contentdata().length()),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fcgiprotocol.Stdin.contentData");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->contentdata(), target);
  }

  // optional int32 type = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fcgiprotocol.Stdin)
  return target;
}

size_t Stdin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fcgiprotocol.Stdin)
  size_t total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        _internal_metadata_.unknown_fields());
  }
  if (_has_bits_[0 / 32] & 3u) {
    // optional string contentData = 1;
    if (has_contentdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contentdata());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Stdin::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fcgiprotocol.Stdin)
  GOOGLE_DCHECK_NE(&from, this);
  const Stdin* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const Stdin>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fcgiprotocol.Stdin)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fcgiprotocol.Stdin)
    MergeFrom(*source);
  }
}

void Stdin::MergeFrom(const Stdin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fcgiprotocol.Stdin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_contentdata();
      contentdata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.contentdata_);
    }
    if (cached_has_bits & 0x00000002u) {
      type_ = from.type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void Stdin::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fcgiprotocol.Stdin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Stdin::CopyFrom(const Stdin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fcgiprotocol.Stdin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Stdin::IsInitialized() const {
  return true;
}

void Stdin::Swap(Stdin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Stdin::InternalSwap(Stdin* other) {
  using std::swap;
  contentdata_.Swap(&other->contentdata_);
  swap(type_, other->type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Stdin::GetMetadata() const {
  protobuf_protocol_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_protocol_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fcgiprotocol

// @@protoc_insertion_point(global_scope)
