// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Record.proto

#ifndef PROTOBUF_Record_2eproto__INCLUDED
#define PROTOBUF_Record_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Record_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsRecordImpl();
void InitDefaultsRecord();
inline void InitDefaults() {
  InitDefaultsRecord();
}
}  // namespace protobuf_Record_2eproto
namespace fcgi {
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
}  // namespace fcgi
namespace fcgi {

// ===================================================================

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgi.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const PROTOBUF_FINAL { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string contentData = 7;
  bool has_contentdata() const;
  void clear_contentdata();
  static const int kContentDataFieldNumber = 7;
  const ::std::string& contentdata() const;
  void set_contentdata(const ::std::string& value);
  #if LANG_CXX11
  void set_contentdata(::std::string&& value);
  #endif
  void set_contentdata(const char* value);
  void set_contentdata(const char* value, size_t size);
  ::std::string* mutable_contentdata();
  ::std::string* release_contentdata();
  void set_allocated_contentdata(::std::string* contentdata);

  // optional string paddingData = 8;
  bool has_paddingdata() const;
  void clear_paddingdata();
  static const int kPaddingDataFieldNumber = 8;
  const ::std::string& paddingdata() const;
  void set_paddingdata(const ::std::string& value);
  #if LANG_CXX11
  void set_paddingdata(::std::string&& value);
  #endif
  void set_paddingdata(const char* value);
  void set_paddingdata(const char* value, size_t size);
  ::std::string* mutable_paddingdata();
  ::std::string* release_paddingdata();
  void set_allocated_paddingdata(::std::string* paddingdata);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // optional int32 reserved = 4;
  bool has_reserved() const;
  void clear_reserved();
  static const int kReservedFieldNumber = 4;
  ::google::protobuf::int32 reserved() const;
  void set_reserved(::google::protobuf::int32 value);

  // optional int32 contentLength = 5;
  bool has_contentlength() const;
  void clear_contentlength();
  static const int kContentLengthFieldNumber = 5;
  ::google::protobuf::int32 contentlength() const;
  void set_contentlength(::google::protobuf::int32 value);

  // optional int32 paddingLength = 6;
  bool has_paddinglength() const;
  void clear_paddinglength();
  static const int kPaddingLengthFieldNumber = 6;
  ::google::protobuf::int32 paddinglength() const;
  void set_paddinglength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fcgi.Record)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_reserved();
  void clear_has_reserved();
  void set_has_contentlength();
  void clear_has_contentlength();
  void set_has_paddinglength();
  void clear_has_paddinglength();
  void set_has_contentdata();
  void clear_has_contentdata();
  void set_has_paddingdata();
  void clear_has_paddingdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentdata_;
  ::google::protobuf::internal::ArenaStringPtr paddingdata_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 reserved_;
  ::google::protobuf::int32 contentlength_;
  ::google::protobuf::int32 paddinglength_;
  friend struct ::protobuf_Record_2eproto::TableStruct;
  friend void ::protobuf_Record_2eproto::InitDefaultsRecordImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Record

// optional int32 version = 1;
inline bool Record::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Record::version() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.version)
  return version_;
}
inline void Record::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.version)
}

// optional int32 type = 2;
inline bool Record::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Record::type() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.type)
  return type_;
}
inline void Record::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.type)
}

// required int32 request_id = 3;
inline bool Record::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Record::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Record::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Record::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
inline ::google::protobuf::int32 Record::request_id() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.request_id)
  return request_id_;
}
inline void Record::set_request_id(::google::protobuf::int32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.request_id)
}

// optional int32 reserved = 4;
inline bool Record::has_reserved() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Record::set_has_reserved() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Record::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Record::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 Record::reserved() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.reserved)
  return reserved_;
}
inline void Record::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.reserved)
}

// optional int32 contentLength = 5;
inline bool Record::has_contentlength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Record::set_has_contentlength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Record::clear_has_contentlength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Record::clear_contentlength() {
  contentlength_ = 0;
  clear_has_contentlength();
}
inline ::google::protobuf::int32 Record::contentlength() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.contentLength)
  return contentlength_;
}
inline void Record::set_contentlength(::google::protobuf::int32 value) {
  set_has_contentlength();
  contentlength_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.contentLength)
}

// optional int32 paddingLength = 6;
inline bool Record::has_paddinglength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Record::set_has_paddinglength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Record::clear_has_paddinglength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Record::clear_paddinglength() {
  paddinglength_ = 0;
  clear_has_paddinglength();
}
inline ::google::protobuf::int32 Record::paddinglength() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.paddingLength)
  return paddinglength_;
}
inline void Record::set_paddinglength(::google::protobuf::int32 value) {
  set_has_paddinglength();
  paddinglength_ = value;
  // @@protoc_insertion_point(field_set:fcgi.Record.paddingLength)
}

// optional string contentData = 7;
inline bool Record::has_contentdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_contentdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_contentdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_contentdata() {
  contentdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentdata();
}
inline const ::std::string& Record::contentdata() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.contentData)
  return contentdata_.GetNoArena();
}
inline void Record::set_contentdata(const ::std::string& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgi.Record.contentData)
}
#if LANG_CXX11
inline void Record::set_contentdata(::std::string&& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgi.Record.contentData)
}
#endif
inline void Record::set_contentdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgi.Record.contentData)
}
inline void Record::set_contentdata(const char* value, size_t size) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgi.Record.contentData)
}
inline ::std::string* Record::mutable_contentdata() {
  set_has_contentdata();
  // @@protoc_insertion_point(field_mutable:fcgi.Record.contentData)
  return contentdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_contentdata() {
  // @@protoc_insertion_point(field_release:fcgi.Record.contentData)
  clear_has_contentdata();
  return contentdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_contentdata(::std::string* contentdata) {
  if (contentdata != NULL) {
    set_has_contentdata();
  } else {
    clear_has_contentdata();
  }
  contentdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentdata);
  // @@protoc_insertion_point(field_set_allocated:fcgi.Record.contentData)
}

// optional string paddingData = 8;
inline bool Record::has_paddingdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_paddingdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_paddingdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_paddingdata() {
  paddingdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paddingdata();
}
inline const ::std::string& Record::paddingdata() const {
  // @@protoc_insertion_point(field_get:fcgi.Record.paddingData)
  return paddingdata_.GetNoArena();
}
inline void Record::set_paddingdata(const ::std::string& value) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgi.Record.paddingData)
}
#if LANG_CXX11
inline void Record::set_paddingdata(::std::string&& value) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgi.Record.paddingData)
}
#endif
inline void Record::set_paddingdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgi.Record.paddingData)
}
inline void Record::set_paddingdata(const char* value, size_t size) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgi.Record.paddingData)
}
inline ::std::string* Record::mutable_paddingdata() {
  set_has_paddingdata();
  // @@protoc_insertion_point(field_mutable:fcgi.Record.paddingData)
  return paddingdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_paddingdata() {
  // @@protoc_insertion_point(field_release:fcgi.Record.paddingData)
  clear_has_paddingdata();
  return paddingdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_paddingdata(::std::string* paddingdata) {
  if (paddingdata != NULL) {
    set_has_paddingdata();
  } else {
    clear_has_paddingdata();
  }
  paddingdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paddingdata);
  // @@protoc_insertion_point(field_set_allocated:fcgi.Record.paddingData)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace fcgi

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Record_2eproto__INCLUDED
