// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FCGI.proto

#include "FCGI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)
namespace protocol {
}  // namespace protocol
namespace protobuf_FCGI_2eproto {
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[5];
const ::google::protobuf::uint32 TableStruct::offsets[1] = {};
static const ::google::protobuf::internal::MigrationSchema* schemas = NULL;
static const ::google::protobuf::Message* const* file_default_instances = NULL;

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "FCGI.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      NULL, file_level_enum_descriptors, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\nFCGI.proto\022\010protocol*\266\001\n\013FCGI_Header\022\021"
      "\n\rBEGIN_REQUEST\020\001\022\021\n\rABORT_REQUEST\020\002\022\017\n\013"
      "END_REQUEST\020\003\022\n\n\006PARAMS\020\004\022\t\n\005STDIN\020\005\022\n\n\006"
      "STDOUT\020\006\022\n\n\006STDERR\020\007\022\010\n\004DATA\020\010\022\016\n\nGET_VA"
      "LUES\020\t\022\025\n\021GET_VALUES_RESULT\020\n\022\020\n\014UNKNOWN"
      "_TYPE\020\013*B\n\014Header_Const\022\023\n\017NULL_REQUEST_"
      "ID\020\000\022\r\n\tVERSION_1\020\001\022\016\n\nHEADER_LEN\020\010*\034\n\013C"
      "onn_Status\022\r\n\tKEEP_CONN\020\001*6\n\tFCGI_Role\022\r"
      "\n\tRESPONDER\020\001\022\016\n\nAUTHORIZER\020\002\022\n\n\006FILTER\020"
      "\003*\\\n\017Protocol_Status\022\024\n\020REQUEST_COMPLETE"
      "\020\000\022\021\n\rCANT_MPX_CONN\020\001\022\016\n\nOVERLOADED\020\002\022\020\n"
      "\014UNKNOWN_ROLE\020\003"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 455);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "FCGI.proto", &protobuf_RegisterTypes);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_FCGI_2eproto
namespace protocol {
const ::google::protobuf::EnumDescriptor* FCGI_Header_descriptor() {
  protobuf_FCGI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FCGI_2eproto::file_level_enum_descriptors[0];
}
bool FCGI_Header_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Header_Const_descriptor() {
  protobuf_FCGI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FCGI_2eproto::file_level_enum_descriptors[1];
}
bool Header_Const_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Conn_Status_descriptor() {
  protobuf_FCGI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FCGI_2eproto::file_level_enum_descriptors[2];
}
bool Conn_Status_IsValid(int value) {
  switch (value) {
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* FCGI_Role_descriptor() {
  protobuf_FCGI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FCGI_2eproto::file_level_enum_descriptors[3];
}
bool FCGI_Role_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* Protocol_Status_descriptor() {
  protobuf_FCGI_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_FCGI_2eproto::file_level_enum_descriptors[4];
}
bool Protocol_Status_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace protocol

// @@protoc_insertion_point(global_scope)
