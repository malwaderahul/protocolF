// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: FCGI.proto

#ifndef PROTOBUF_FCGI_2eproto__INCLUDED
#define PROTOBUF_FCGI_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
// @@protoc_insertion_point(includes)

namespace protobuf_FCGI_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
inline void InitDefaults() {
}
}  // namespace protobuf_FCGI_2eproto
namespace protocol {
}  // namespace protocol
namespace protocol {

enum FCGI_Header {
  BEGIN_REQUEST = 1,
  ABORT_REQUEST = 2,
  END_REQUEST = 3,
  PARAMS = 4,
  STDIN = 5,
  STDOUT = 6,
  STDERR = 7,
  DATA = 8,
  GET_VALUES = 9,
  GET_VALUES_RESULT = 10,
  UNKNOWN_TYPE = 11
};
bool FCGI_Header_IsValid(int value);
const FCGI_Header FCGI_Header_MIN = BEGIN_REQUEST;
const FCGI_Header FCGI_Header_MAX = UNKNOWN_TYPE;
const int FCGI_Header_ARRAYSIZE = FCGI_Header_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCGI_Header_descriptor();
inline const ::std::string& FCGI_Header_Name(FCGI_Header value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCGI_Header_descriptor(), value);
}
inline bool FCGI_Header_Parse(
    const ::std::string& name, FCGI_Header* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCGI_Header>(
    FCGI_Header_descriptor(), name, value);
}
enum Header_Const {
  NULL_REQUEST_ID = 0,
  VERSION_1 = 1,
  HEADER_LEN = 8
};
bool Header_Const_IsValid(int value);
const Header_Const Header_Const_MIN = NULL_REQUEST_ID;
const Header_Const Header_Const_MAX = HEADER_LEN;
const int Header_Const_ARRAYSIZE = Header_Const_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Const_descriptor();
inline const ::std::string& Header_Const_Name(Header_Const value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Const_descriptor(), value);
}
inline bool Header_Const_Parse(
    const ::std::string& name, Header_Const* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Const>(
    Header_Const_descriptor(), name, value);
}
enum Conn_Status {
  KEEP_CONN = 1
};
bool Conn_Status_IsValid(int value);
const Conn_Status Conn_Status_MIN = KEEP_CONN;
const Conn_Status Conn_Status_MAX = KEEP_CONN;
const int Conn_Status_ARRAYSIZE = Conn_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Conn_Status_descriptor();
inline const ::std::string& Conn_Status_Name(Conn_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Conn_Status_descriptor(), value);
}
inline bool Conn_Status_Parse(
    const ::std::string& name, Conn_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Conn_Status>(
    Conn_Status_descriptor(), name, value);
}
enum FCGI_Role {
  RESPONDER = 1,
  AUTHORIZER = 2,
  FILTER = 3
};
bool FCGI_Role_IsValid(int value);
const FCGI_Role FCGI_Role_MIN = RESPONDER;
const FCGI_Role FCGI_Role_MAX = FILTER;
const int FCGI_Role_ARRAYSIZE = FCGI_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCGI_Role_descriptor();
inline const ::std::string& FCGI_Role_Name(FCGI_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCGI_Role_descriptor(), value);
}
inline bool FCGI_Role_Parse(
    const ::std::string& name, FCGI_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCGI_Role>(
    FCGI_Role_descriptor(), name, value);
}
enum Protocol_Status {
  REQUEST_COMPLETE = 0,
  CANT_MPX_CONN = 1,
  OVERLOADED = 2,
  UNKNOWN_ROLE = 3
};
bool Protocol_Status_IsValid(int value);
const Protocol_Status Protocol_Status_MIN = REQUEST_COMPLETE;
const Protocol_Status Protocol_Status_MAX = UNKNOWN_ROLE;
const int Protocol_Status_ARRAYSIZE = Protocol_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Protocol_Status_descriptor();
inline const ::std::string& Protocol_Status_Name(Protocol_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Protocol_Status_descriptor(), value);
}
inline bool Protocol_Status_Parse(
    const ::std::string& name, Protocol_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protocol_Status>(
    Protocol_Status_descriptor(), name, value);
}
// ===================================================================


// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace protocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::protocol::FCGI_Header> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::FCGI_Header>() {
  return ::protocol::FCGI_Header_descriptor();
}
template <> struct is_proto_enum< ::protocol::Header_Const> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Header_Const>() {
  return ::protocol::Header_Const_descriptor();
}
template <> struct is_proto_enum< ::protocol::Conn_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Conn_Status>() {
  return ::protocol::Conn_Status_descriptor();
}
template <> struct is_proto_enum< ::protocol::FCGI_Role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::FCGI_Role>() {
  return ::protocol::FCGI_Role_descriptor();
}
template <> struct is_proto_enum< ::protocol::Protocol_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protocol::Protocol_Status>() {
  return ::protocol::Protocol_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_FCGI_2eproto__INCLUDED
