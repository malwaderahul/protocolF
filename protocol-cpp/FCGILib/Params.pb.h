// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Params.proto

#ifndef PROTOBUF_Params_2eproto__INCLUDED
#define PROTOBUF_Params_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_Params_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsMyPageContentImpl();
void InitDefaultsMyPageContent();
void InitDefaultsParamsImpl();
void InitDefaultsParams();
inline void InitDefaults() {
  InitDefaultsMyPageContent();
  InitDefaultsParams();
}
}  // namespace protobuf_Params_2eproto
namespace record {
class MyPageContent;
class MyPageContentDefaultTypeInternal;
extern MyPageContentDefaultTypeInternal _MyPageContent_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
}  // namespace record
namespace record {

// ===================================================================

class MyPageContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.MyPageContent) */ {
 public:
  MyPageContent();
  virtual ~MyPageContent();

  MyPageContent(const MyPageContent& from);

  inline MyPageContent& operator=(const MyPageContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MyPageContent(MyPageContent&& from) noexcept
    : MyPageContent() {
    *this = ::std::move(from);
  }

  inline MyPageContent& operator=(MyPageContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyPageContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyPageContent* internal_default_instance() {
    return reinterpret_cast<const MyPageContent*>(
               &_MyPageContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(MyPageContent* other);
  friend void swap(MyPageContent& a, MyPageContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MyPageContent* New() const PROTOBUF_FINAL { return New(NULL); }

  MyPageContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MyPageContent& from);
  void MergeFrom(const MyPageContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MyPageContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:record.MyPageContent)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_Params_2eproto::TableStruct;
  friend void ::protobuf_Params_2eproto::InitDefaultsMyPageContentImpl();
};
// -------------------------------------------------------------------

class Params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:record.Params) */ {
 public:
  Params();
  virtual ~Params();

  Params(const Params& from);

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(Params* other);
  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const PROTOBUF_FINAL { return New(NULL); }

  Params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .record.MyPageContent paramvalues = 1;
  int paramvalues_size() const;
  void clear_paramvalues();
  static const int kParamvaluesFieldNumber = 1;
  const ::record::MyPageContent& paramvalues(int index) const;
  ::record::MyPageContent* mutable_paramvalues(int index);
  ::record::MyPageContent* add_paramvalues();
  ::google::protobuf::RepeatedPtrField< ::record::MyPageContent >*
      mutable_paramvalues();
  const ::google::protobuf::RepeatedPtrField< ::record::MyPageContent >&
      paramvalues() const;

  // @@protoc_insertion_point(class_scope:record.Params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::record::MyPageContent > paramvalues_;
  friend struct ::protobuf_Params_2eproto::TableStruct;
  friend void ::protobuf_Params_2eproto::InitDefaultsParamsImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyPageContent

// required string key = 1;
inline bool MyPageContent::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyPageContent::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyPageContent::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyPageContent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MyPageContent::key() const {
  // @@protoc_insertion_point(field_get:record.MyPageContent.key)
  return key_.GetNoArena();
}
inline void MyPageContent::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.MyPageContent.key)
}
#if LANG_CXX11
inline void MyPageContent::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.MyPageContent.key)
}
#endif
inline void MyPageContent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.MyPageContent.key)
}
inline void MyPageContent::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.MyPageContent.key)
}
inline ::std::string* MyPageContent::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:record.MyPageContent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyPageContent::release_key() {
  // @@protoc_insertion_point(field_release:record.MyPageContent.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyPageContent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:record.MyPageContent.key)
}

// required string value = 2;
inline bool MyPageContent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyPageContent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyPageContent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyPageContent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MyPageContent::value() const {
  // @@protoc_insertion_point(field_get:record.MyPageContent.value)
  return value_.GetNoArena();
}
inline void MyPageContent::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:record.MyPageContent.value)
}
#if LANG_CXX11
inline void MyPageContent::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:record.MyPageContent.value)
}
#endif
inline void MyPageContent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:record.MyPageContent.value)
}
inline void MyPageContent::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:record.MyPageContent.value)
}
inline ::std::string* MyPageContent::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:record.MyPageContent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyPageContent::release_value() {
  // @@protoc_insertion_point(field_release:record.MyPageContent.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyPageContent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:record.MyPageContent.value)
}

// -------------------------------------------------------------------

// Params

// repeated .record.MyPageContent paramvalues = 1;
inline int Params::paramvalues_size() const {
  return paramvalues_.size();
}
inline void Params::clear_paramvalues() {
  paramvalues_.Clear();
}
inline const ::record::MyPageContent& Params::paramvalues(int index) const {
  // @@protoc_insertion_point(field_get:record.Params.paramvalues)
  return paramvalues_.Get(index);
}
inline ::record::MyPageContent* Params::mutable_paramvalues(int index) {
  // @@protoc_insertion_point(field_mutable:record.Params.paramvalues)
  return paramvalues_.Mutable(index);
}
inline ::record::MyPageContent* Params::add_paramvalues() {
  // @@protoc_insertion_point(field_add:record.Params.paramvalues)
  return paramvalues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::record::MyPageContent >*
Params::mutable_paramvalues() {
  // @@protoc_insertion_point(field_mutable_list:record.Params.paramvalues)
  return &paramvalues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::record::MyPageContent >&
Params::paramvalues() const {
  // @@protoc_insertion_point(field_list:record.Params.paramvalues)
  return paramvalues_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace record

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Params_2eproto__INCLUDED
