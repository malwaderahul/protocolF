// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protocol.proto

#ifndef PROTOBUF_protocol_2eproto__INCLUDED
#define PROTOBUF_protocol_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_protocol_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsBeginRequestImpl();
void InitDefaultsBeginRequest();
void InitDefaultsMyPageContentImpl();
void InitDefaultsMyPageContent();
void InitDefaultsParamsImpl();
void InitDefaultsParams();
void InitDefaultsRecordImpl();
void InitDefaultsRecord();
void InitDefaultsStdinImpl();
void InitDefaultsStdin();
inline void InitDefaults() {
  InitDefaultsBeginRequest();
  InitDefaultsMyPageContent();
  InitDefaultsParams();
  InitDefaultsRecord();
  InitDefaultsStdin();
}
}  // namespace protobuf_protocol_2eproto
namespace fcgiprotocol {
class BeginRequest;
class BeginRequestDefaultTypeInternal;
extern BeginRequestDefaultTypeInternal _BeginRequest_default_instance_;
class MyPageContent;
class MyPageContentDefaultTypeInternal;
extern MyPageContentDefaultTypeInternal _MyPageContent_default_instance_;
class Params;
class ParamsDefaultTypeInternal;
extern ParamsDefaultTypeInternal _Params_default_instance_;
class Record;
class RecordDefaultTypeInternal;
extern RecordDefaultTypeInternal _Record_default_instance_;
class Stdin;
class StdinDefaultTypeInternal;
extern StdinDefaultTypeInternal _Stdin_default_instance_;
}  // namespace fcgiprotocol
namespace fcgiprotocol {

enum FCGI_Header {
  BEGIN_REQUEST = 1,
  ABORT_REQUEST = 2,
  END_REQUEST = 3,
  PARAMS = 4,
  STDIN = 5,
  STDOUT = 6,
  STDERR = 7,
  DATA = 8,
  GET_VALUES = 9,
  GET_VALUES_RESULT = 10,
  UNKNOWN_TYPE = 11
};
bool FCGI_Header_IsValid(int value);
const FCGI_Header FCGI_Header_MIN = BEGIN_REQUEST;
const FCGI_Header FCGI_Header_MAX = UNKNOWN_TYPE;
const int FCGI_Header_ARRAYSIZE = FCGI_Header_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCGI_Header_descriptor();
inline const ::std::string& FCGI_Header_Name(FCGI_Header value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCGI_Header_descriptor(), value);
}
inline bool FCGI_Header_Parse(
    const ::std::string& name, FCGI_Header* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCGI_Header>(
    FCGI_Header_descriptor(), name, value);
}
enum Header_Const {
  NULL_REQUEST_ID = 0,
  VERSION_1 = 1,
  HEADER_LEN = 8
};
bool Header_Const_IsValid(int value);
const Header_Const Header_Const_MIN = NULL_REQUEST_ID;
const Header_Const Header_Const_MAX = HEADER_LEN;
const int Header_Const_ARRAYSIZE = Header_Const_MAX + 1;

const ::google::protobuf::EnumDescriptor* Header_Const_descriptor();
inline const ::std::string& Header_Const_Name(Header_Const value) {
  return ::google::protobuf::internal::NameOfEnum(
    Header_Const_descriptor(), value);
}
inline bool Header_Const_Parse(
    const ::std::string& name, Header_Const* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Header_Const>(
    Header_Const_descriptor(), name, value);
}
enum Conn_Status {
  KEEP_CONN = 1
};
bool Conn_Status_IsValid(int value);
const Conn_Status Conn_Status_MIN = KEEP_CONN;
const Conn_Status Conn_Status_MAX = KEEP_CONN;
const int Conn_Status_ARRAYSIZE = Conn_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Conn_Status_descriptor();
inline const ::std::string& Conn_Status_Name(Conn_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Conn_Status_descriptor(), value);
}
inline bool Conn_Status_Parse(
    const ::std::string& name, Conn_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Conn_Status>(
    Conn_Status_descriptor(), name, value);
}
enum FCGI_Role {
  RESPONDER = 1,
  AUTHORIZER = 2,
  FILTER = 3
};
bool FCGI_Role_IsValid(int value);
const FCGI_Role FCGI_Role_MIN = RESPONDER;
const FCGI_Role FCGI_Role_MAX = FILTER;
const int FCGI_Role_ARRAYSIZE = FCGI_Role_MAX + 1;

const ::google::protobuf::EnumDescriptor* FCGI_Role_descriptor();
inline const ::std::string& FCGI_Role_Name(FCGI_Role value) {
  return ::google::protobuf::internal::NameOfEnum(
    FCGI_Role_descriptor(), value);
}
inline bool FCGI_Role_Parse(
    const ::std::string& name, FCGI_Role* value) {
  return ::google::protobuf::internal::ParseNamedEnum<FCGI_Role>(
    FCGI_Role_descriptor(), name, value);
}
enum Protocol_Status {
  REQUEST_COMPLETE = 0,
  CANT_MPX_CONN = 1,
  OVERLOADED = 2,
  UNKNOWN_ROLE = 3
};
bool Protocol_Status_IsValid(int value);
const Protocol_Status Protocol_Status_MIN = REQUEST_COMPLETE;
const Protocol_Status Protocol_Status_MAX = UNKNOWN_ROLE;
const int Protocol_Status_ARRAYSIZE = Protocol_Status_MAX + 1;

const ::google::protobuf::EnumDescriptor* Protocol_Status_descriptor();
inline const ::std::string& Protocol_Status_Name(Protocol_Status value) {
  return ::google::protobuf::internal::NameOfEnum(
    Protocol_Status_descriptor(), value);
}
inline bool Protocol_Status_Parse(
    const ::std::string& name, Protocol_Status* value) {
  return ::google::protobuf::internal::ParseNamedEnum<Protocol_Status>(
    Protocol_Status_descriptor(), name, value);
}
// ===================================================================

class BeginRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgiprotocol.BeginRequest) */ {
 public:
  BeginRequest();
  virtual ~BeginRequest();

  BeginRequest(const BeginRequest& from);

  inline BeginRequest& operator=(const BeginRequest& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  BeginRequest(BeginRequest&& from) noexcept
    : BeginRequest() {
    *this = ::std::move(from);
  }

  inline BeginRequest& operator=(BeginRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeginRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BeginRequest* internal_default_instance() {
    return reinterpret_cast<const BeginRequest*>(
               &_BeginRequest_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(BeginRequest* other);
  friend void swap(BeginRequest& a, BeginRequest& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline BeginRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  BeginRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const BeginRequest& from);
  void MergeFrom(const BeginRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(BeginRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string reserved1 = 3;
  bool has_reserved1() const;
  void clear_reserved1();
  static const int kReserved1FieldNumber = 3;
  const ::std::string& reserved1() const;
  void set_reserved1(const ::std::string& value);
  #if LANG_CXX11
  void set_reserved1(::std::string&& value);
  #endif
  void set_reserved1(const char* value);
  void set_reserved1(const char* value, size_t size);
  ::std::string* mutable_reserved1();
  ::std::string* release_reserved1();
  void set_allocated_reserved1(::std::string* reserved1);

  // optional int32 role = 1;
  bool has_role() const;
  void clear_role();
  static const int kRoleFieldNumber = 1;
  ::google::protobuf::int32 role() const;
  void set_role(::google::protobuf::int32 value);

  // optional int32 flags = 2;
  bool has_flags() const;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::int32 flags() const;
  void set_flags(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fcgiprotocol.BeginRequest)
 private:
  void set_has_role();
  void clear_has_role();
  void set_has_flags();
  void clear_has_flags();
  void set_has_reserved1();
  void clear_has_reserved1();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr reserved1_;
  ::google::protobuf::int32 role_;
  ::google::protobuf::int32 flags_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsBeginRequestImpl();
};
// -------------------------------------------------------------------

class MyPageContent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgiprotocol.MyPageContent) */ {
 public:
  MyPageContent();
  virtual ~MyPageContent();

  MyPageContent(const MyPageContent& from);

  inline MyPageContent& operator=(const MyPageContent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MyPageContent(MyPageContent&& from) noexcept
    : MyPageContent() {
    *this = ::std::move(from);
  }

  inline MyPageContent& operator=(MyPageContent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MyPageContent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyPageContent* internal_default_instance() {
    return reinterpret_cast<const MyPageContent*>(
               &_MyPageContent_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(MyPageContent* other);
  friend void swap(MyPageContent& a, MyPageContent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MyPageContent* New() const PROTOBUF_FINAL { return New(NULL); }

  MyPageContent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MyPageContent& from);
  void MergeFrom(const MyPageContent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MyPageContent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  bool has_key() const;
  void clear_key();
  static const int kKeyFieldNumber = 1;
  const ::std::string& key() const;
  void set_key(const ::std::string& value);
  #if LANG_CXX11
  void set_key(::std::string&& value);
  #endif
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  ::std::string* mutable_key();
  ::std::string* release_key();
  void set_allocated_key(::std::string* key);

  // required string value = 2;
  bool has_value() const;
  void clear_value();
  static const int kValueFieldNumber = 2;
  const ::std::string& value() const;
  void set_value(const ::std::string& value);
  #if LANG_CXX11
  void set_value(::std::string&& value);
  #endif
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  ::std::string* mutable_value();
  ::std::string* release_value();
  void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:fcgiprotocol.MyPageContent)
 private:
  void set_has_key();
  void clear_has_key();
  void set_has_value();
  void clear_has_value();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr key_;
  ::google::protobuf::internal::ArenaStringPtr value_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsMyPageContentImpl();
};
// -------------------------------------------------------------------

class Params : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgiprotocol.Params) */ {
 public:
  Params();
  virtual ~Params();

  Params(const Params& from);

  inline Params& operator=(const Params& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Params(Params&& from) noexcept
    : Params() {
    *this = ::std::move(from);
  }

  inline Params& operator=(Params&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Params& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Params* internal_default_instance() {
    return reinterpret_cast<const Params*>(
               &_Params_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(Params* other);
  friend void swap(Params& a, Params& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Params* New() const PROTOBUF_FINAL { return New(NULL); }

  Params* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Params& from);
  void MergeFrom(const Params& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Params* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .fcgiprotocol.MyPageContent paramvalues = 1;
  int paramvalues_size() const;
  void clear_paramvalues();
  static const int kParamvaluesFieldNumber = 1;
  const ::fcgiprotocol::MyPageContent& paramvalues(int index) const;
  ::fcgiprotocol::MyPageContent* mutable_paramvalues(int index);
  ::fcgiprotocol::MyPageContent* add_paramvalues();
  ::google::protobuf::RepeatedPtrField< ::fcgiprotocol::MyPageContent >*
      mutable_paramvalues();
  const ::google::protobuf::RepeatedPtrField< ::fcgiprotocol::MyPageContent >&
      paramvalues() const;

  // @@protoc_insertion_point(class_scope:fcgiprotocol.Params)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::fcgiprotocol::MyPageContent > paramvalues_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsParamsImpl();
};
// -------------------------------------------------------------------

class Record : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgiprotocol.Record) */ {
 public:
  Record();
  virtual ~Record();

  Record(const Record& from);

  inline Record& operator=(const Record& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Record(Record&& from) noexcept
    : Record() {
    *this = ::std::move(from);
  }

  inline Record& operator=(Record&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Record& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Record* internal_default_instance() {
    return reinterpret_cast<const Record*>(
               &_Record_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(Record* other);
  friend void swap(Record& a, Record& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Record* New() const PROTOBUF_FINAL { return New(NULL); }

  Record* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Record& from);
  void MergeFrom(const Record& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Record* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string contentData = 7;
  bool has_contentdata() const;
  void clear_contentdata();
  static const int kContentDataFieldNumber = 7;
  const ::std::string& contentdata() const;
  void set_contentdata(const ::std::string& value);
  #if LANG_CXX11
  void set_contentdata(::std::string&& value);
  #endif
  void set_contentdata(const char* value);
  void set_contentdata(const char* value, size_t size);
  ::std::string* mutable_contentdata();
  ::std::string* release_contentdata();
  void set_allocated_contentdata(::std::string* contentdata);

  // optional string paddingData = 8;
  bool has_paddingdata() const;
  void clear_paddingdata();
  static const int kPaddingDataFieldNumber = 8;
  const ::std::string& paddingdata() const;
  void set_paddingdata(const ::std::string& value);
  #if LANG_CXX11
  void set_paddingdata(::std::string&& value);
  #endif
  void set_paddingdata(const char* value);
  void set_paddingdata(const char* value, size_t size);
  ::std::string* mutable_paddingdata();
  ::std::string* release_paddingdata();
  void set_allocated_paddingdata(::std::string* paddingdata);

  // optional int32 version = 1;
  bool has_version() const;
  void clear_version();
  static const int kVersionFieldNumber = 1;
  ::google::protobuf::int32 version() const;
  void set_version(::google::protobuf::int32 value);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // required int32 request_id = 3;
  bool has_request_id() const;
  void clear_request_id();
  static const int kRequestIdFieldNumber = 3;
  ::google::protobuf::int32 request_id() const;
  void set_request_id(::google::protobuf::int32 value);

  // optional int32 reserved = 4;
  bool has_reserved() const;
  void clear_reserved();
  static const int kReservedFieldNumber = 4;
  ::google::protobuf::int32 reserved() const;
  void set_reserved(::google::protobuf::int32 value);

  // optional int32 contentLength = 5;
  bool has_contentlength() const;
  void clear_contentlength();
  static const int kContentLengthFieldNumber = 5;
  ::google::protobuf::int32 contentlength() const;
  void set_contentlength(::google::protobuf::int32 value);

  // optional int32 paddingLength = 6;
  bool has_paddinglength() const;
  void clear_paddinglength();
  static const int kPaddingLengthFieldNumber = 6;
  ::google::protobuf::int32 paddinglength() const;
  void set_paddinglength(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fcgiprotocol.Record)
 private:
  void set_has_version();
  void clear_has_version();
  void set_has_type();
  void clear_has_type();
  void set_has_request_id();
  void clear_has_request_id();
  void set_has_reserved();
  void clear_has_reserved();
  void set_has_contentlength();
  void clear_has_contentlength();
  void set_has_paddinglength();
  void clear_has_paddinglength();
  void set_has_contentdata();
  void clear_has_contentdata();
  void set_has_paddingdata();
  void clear_has_paddingdata();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentdata_;
  ::google::protobuf::internal::ArenaStringPtr paddingdata_;
  ::google::protobuf::int32 version_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 request_id_;
  ::google::protobuf::int32 reserved_;
  ::google::protobuf::int32 contentlength_;
  ::google::protobuf::int32 paddinglength_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsRecordImpl();
};
// -------------------------------------------------------------------

class Stdin : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:fcgiprotocol.Stdin) */ {
 public:
  Stdin();
  virtual ~Stdin();

  Stdin(const Stdin& from);

  inline Stdin& operator=(const Stdin& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Stdin(Stdin&& from) noexcept
    : Stdin() {
    *this = ::std::move(from);
  }

  inline Stdin& operator=(Stdin&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Stdin& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Stdin* internal_default_instance() {
    return reinterpret_cast<const Stdin*>(
               &_Stdin_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(Stdin* other);
  friend void swap(Stdin& a, Stdin& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Stdin* New() const PROTOBUF_FINAL { return New(NULL); }

  Stdin* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Stdin& from);
  void MergeFrom(const Stdin& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Stdin* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string contentData = 1;
  bool has_contentdata() const;
  void clear_contentdata();
  static const int kContentDataFieldNumber = 1;
  const ::std::string& contentdata() const;
  void set_contentdata(const ::std::string& value);
  #if LANG_CXX11
  void set_contentdata(::std::string&& value);
  #endif
  void set_contentdata(const char* value);
  void set_contentdata(const char* value, size_t size);
  ::std::string* mutable_contentdata();
  ::std::string* release_contentdata();
  void set_allocated_contentdata(::std::string* contentdata);

  // optional int32 type = 2;
  bool has_type() const;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::google::protobuf::int32 type() const;
  void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:fcgiprotocol.Stdin)
 private:
  void set_has_contentdata();
  void clear_has_contentdata();
  void set_has_type();
  void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr contentdata_;
  ::google::protobuf::int32 type_;
  friend struct ::protobuf_protocol_2eproto::TableStruct;
  friend void ::protobuf_protocol_2eproto::InitDefaultsStdinImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BeginRequest

// optional int32 role = 1;
inline bool BeginRequest::has_role() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeginRequest::set_has_role() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeginRequest::clear_has_role() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeginRequest::clear_role() {
  role_ = 0;
  clear_has_role();
}
inline ::google::protobuf::int32 BeginRequest::role() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.BeginRequest.role)
  return role_;
}
inline void BeginRequest::set_role(::google::protobuf::int32 value) {
  set_has_role();
  role_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.BeginRequest.role)
}

// optional int32 flags = 2;
inline bool BeginRequest::has_flags() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeginRequest::set_has_flags() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeginRequest::clear_has_flags() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeginRequest::clear_flags() {
  flags_ = 0;
  clear_has_flags();
}
inline ::google::protobuf::int32 BeginRequest::flags() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.BeginRequest.flags)
  return flags_;
}
inline void BeginRequest::set_flags(::google::protobuf::int32 value) {
  set_has_flags();
  flags_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.BeginRequest.flags)
}

// optional string reserved1 = 3;
inline bool BeginRequest::has_reserved1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeginRequest::set_has_reserved1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeginRequest::clear_has_reserved1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeginRequest::clear_reserved1() {
  reserved1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_reserved1();
}
inline const ::std::string& BeginRequest::reserved1() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.BeginRequest.reserved1)
  return reserved1_.GetNoArena();
}
inline void BeginRequest::set_reserved1(const ::std::string& value) {
  set_has_reserved1();
  reserved1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.BeginRequest.reserved1)
}
#if LANG_CXX11
inline void BeginRequest::set_reserved1(::std::string&& value) {
  set_has_reserved1();
  reserved1_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.BeginRequest.reserved1)
}
#endif
inline void BeginRequest::set_reserved1(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_reserved1();
  reserved1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.BeginRequest.reserved1)
}
inline void BeginRequest::set_reserved1(const char* value, size_t size) {
  set_has_reserved1();
  reserved1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.BeginRequest.reserved1)
}
inline ::std::string* BeginRequest::mutable_reserved1() {
  set_has_reserved1();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.BeginRequest.reserved1)
  return reserved1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BeginRequest::release_reserved1() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.BeginRequest.reserved1)
  clear_has_reserved1();
  return reserved1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BeginRequest::set_allocated_reserved1(::std::string* reserved1) {
  if (reserved1 != NULL) {
    set_has_reserved1();
  } else {
    clear_has_reserved1();
  }
  reserved1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), reserved1);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.BeginRequest.reserved1)
}

// -------------------------------------------------------------------

// MyPageContent

// required string key = 1;
inline bool MyPageContent::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MyPageContent::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MyPageContent::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MyPageContent::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
inline const ::std::string& MyPageContent::key() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.MyPageContent.key)
  return key_.GetNoArena();
}
inline void MyPageContent::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.MyPageContent.key)
}
#if LANG_CXX11
inline void MyPageContent::set_key(::std::string&& value) {
  set_has_key();
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.MyPageContent.key)
}
#endif
inline void MyPageContent::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.MyPageContent.key)
}
inline void MyPageContent::set_key(const char* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.MyPageContent.key)
}
inline ::std::string* MyPageContent::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.MyPageContent.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyPageContent::release_key() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.MyPageContent.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyPageContent::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.MyPageContent.key)
}

// required string value = 2;
inline bool MyPageContent::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MyPageContent::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MyPageContent::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MyPageContent::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
inline const ::std::string& MyPageContent::value() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.MyPageContent.value)
  return value_.GetNoArena();
}
inline void MyPageContent::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.MyPageContent.value)
}
#if LANG_CXX11
inline void MyPageContent::set_value(::std::string&& value) {
  set_has_value();
  value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.MyPageContent.value)
}
#endif
inline void MyPageContent::set_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.MyPageContent.value)
}
inline void MyPageContent::set_value(const char* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.MyPageContent.value)
}
inline ::std::string* MyPageContent::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.MyPageContent.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MyPageContent::release_value() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.MyPageContent.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MyPageContent::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.MyPageContent.value)
}

// -------------------------------------------------------------------

// Params

// repeated .fcgiprotocol.MyPageContent paramvalues = 1;
inline int Params::paramvalues_size() const {
  return paramvalues_.size();
}
inline void Params::clear_paramvalues() {
  paramvalues_.Clear();
}
inline const ::fcgiprotocol::MyPageContent& Params::paramvalues(int index) const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Params.paramvalues)
  return paramvalues_.Get(index);
}
inline ::fcgiprotocol::MyPageContent* Params::mutable_paramvalues(int index) {
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.Params.paramvalues)
  return paramvalues_.Mutable(index);
}
inline ::fcgiprotocol::MyPageContent* Params::add_paramvalues() {
  // @@protoc_insertion_point(field_add:fcgiprotocol.Params.paramvalues)
  return paramvalues_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::fcgiprotocol::MyPageContent >*
Params::mutable_paramvalues() {
  // @@protoc_insertion_point(field_mutable_list:fcgiprotocol.Params.paramvalues)
  return &paramvalues_;
}
inline const ::google::protobuf::RepeatedPtrField< ::fcgiprotocol::MyPageContent >&
Params::paramvalues() const {
  // @@protoc_insertion_point(field_list:fcgiprotocol.Params.paramvalues)
  return paramvalues_;
}

// -------------------------------------------------------------------

// Record

// optional int32 version = 1;
inline bool Record::has_version() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Record::set_has_version() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Record::clear_has_version() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Record::clear_version() {
  version_ = 0;
  clear_has_version();
}
inline ::google::protobuf::int32 Record::version() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.version)
  return version_;
}
inline void Record::set_version(::google::protobuf::int32 value) {
  set_has_version();
  version_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.version)
}

// optional int32 type = 2;
inline bool Record::has_type() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Record::set_has_type() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Record::clear_has_type() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Record::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Record::type() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.type)
  return type_;
}
inline void Record::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.type)
}

// required int32 request_id = 3;
inline bool Record::has_request_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Record::set_has_request_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Record::clear_has_request_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Record::clear_request_id() {
  request_id_ = 0;
  clear_has_request_id();
}
inline ::google::protobuf::int32 Record::request_id() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.request_id)
  return request_id_;
}
inline void Record::set_request_id(::google::protobuf::int32 value) {
  set_has_request_id();
  request_id_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.request_id)
}

// optional int32 reserved = 4;
inline bool Record::has_reserved() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Record::set_has_reserved() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Record::clear_has_reserved() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Record::clear_reserved() {
  reserved_ = 0;
  clear_has_reserved();
}
inline ::google::protobuf::int32 Record::reserved() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.reserved)
  return reserved_;
}
inline void Record::set_reserved(::google::protobuf::int32 value) {
  set_has_reserved();
  reserved_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.reserved)
}

// optional int32 contentLength = 5;
inline bool Record::has_contentlength() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Record::set_has_contentlength() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Record::clear_has_contentlength() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Record::clear_contentlength() {
  contentlength_ = 0;
  clear_has_contentlength();
}
inline ::google::protobuf::int32 Record::contentlength() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.contentLength)
  return contentlength_;
}
inline void Record::set_contentlength(::google::protobuf::int32 value) {
  set_has_contentlength();
  contentlength_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.contentLength)
}

// optional int32 paddingLength = 6;
inline bool Record::has_paddinglength() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Record::set_has_paddinglength() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Record::clear_has_paddinglength() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Record::clear_paddinglength() {
  paddinglength_ = 0;
  clear_has_paddinglength();
}
inline ::google::protobuf::int32 Record::paddinglength() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.paddingLength)
  return paddinglength_;
}
inline void Record::set_paddinglength(::google::protobuf::int32 value) {
  set_has_paddinglength();
  paddinglength_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.paddingLength)
}

// optional string contentData = 7;
inline bool Record::has_contentdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Record::set_has_contentdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Record::clear_has_contentdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Record::clear_contentdata() {
  contentdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentdata();
}
inline const ::std::string& Record::contentdata() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.contentData)
  return contentdata_.GetNoArena();
}
inline void Record::set_contentdata(const ::std::string& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.contentData)
}
#if LANG_CXX11
inline void Record::set_contentdata(::std::string&& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.Record.contentData)
}
#endif
inline void Record::set_contentdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.Record.contentData)
}
inline void Record::set_contentdata(const char* value, size_t size) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.Record.contentData)
}
inline ::std::string* Record::mutable_contentdata() {
  set_has_contentdata();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.Record.contentData)
  return contentdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_contentdata() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.Record.contentData)
  clear_has_contentdata();
  return contentdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_contentdata(::std::string* contentdata) {
  if (contentdata != NULL) {
    set_has_contentdata();
  } else {
    clear_has_contentdata();
  }
  contentdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentdata);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.Record.contentData)
}

// optional string paddingData = 8;
inline bool Record::has_paddingdata() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Record::set_has_paddingdata() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Record::clear_has_paddingdata() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Record::clear_paddingdata() {
  paddingdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_paddingdata();
}
inline const ::std::string& Record::paddingdata() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Record.paddingData)
  return paddingdata_.GetNoArena();
}
inline void Record::set_paddingdata(const ::std::string& value) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.Record.paddingData)
}
#if LANG_CXX11
inline void Record::set_paddingdata(::std::string&& value) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.Record.paddingData)
}
#endif
inline void Record::set_paddingdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.Record.paddingData)
}
inline void Record::set_paddingdata(const char* value, size_t size) {
  set_has_paddingdata();
  paddingdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.Record.paddingData)
}
inline ::std::string* Record::mutable_paddingdata() {
  set_has_paddingdata();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.Record.paddingData)
  return paddingdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Record::release_paddingdata() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.Record.paddingData)
  clear_has_paddingdata();
  return paddingdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Record::set_allocated_paddingdata(::std::string* paddingdata) {
  if (paddingdata != NULL) {
    set_has_paddingdata();
  } else {
    clear_has_paddingdata();
  }
  paddingdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), paddingdata);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.Record.paddingData)
}

// -------------------------------------------------------------------

// Stdin

// optional string contentData = 1;
inline bool Stdin::has_contentdata() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Stdin::set_has_contentdata() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Stdin::clear_has_contentdata() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Stdin::clear_contentdata() {
  contentdata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_contentdata();
}
inline const ::std::string& Stdin::contentdata() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Stdin.contentData)
  return contentdata_.GetNoArena();
}
inline void Stdin::set_contentdata(const ::std::string& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:fcgiprotocol.Stdin.contentData)
}
#if LANG_CXX11
inline void Stdin::set_contentdata(::std::string&& value) {
  set_has_contentdata();
  contentdata_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:fcgiprotocol.Stdin.contentData)
}
#endif
inline void Stdin::set_contentdata(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:fcgiprotocol.Stdin.contentData)
}
inline void Stdin::set_contentdata(const char* value, size_t size) {
  set_has_contentdata();
  contentdata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:fcgiprotocol.Stdin.contentData)
}
inline ::std::string* Stdin::mutable_contentdata() {
  set_has_contentdata();
  // @@protoc_insertion_point(field_mutable:fcgiprotocol.Stdin.contentData)
  return contentdata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Stdin::release_contentdata() {
  // @@protoc_insertion_point(field_release:fcgiprotocol.Stdin.contentData)
  clear_has_contentdata();
  return contentdata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Stdin::set_allocated_contentdata(::std::string* contentdata) {
  if (contentdata != NULL) {
    set_has_contentdata();
  } else {
    clear_has_contentdata();
  }
  contentdata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), contentdata);
  // @@protoc_insertion_point(field_set_allocated:fcgiprotocol.Stdin.contentData)
}

// optional int32 type = 2;
inline bool Stdin::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Stdin::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Stdin::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Stdin::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Stdin::type() const {
  // @@protoc_insertion_point(field_get:fcgiprotocol.Stdin.type)
  return type_;
}
inline void Stdin::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:fcgiprotocol.Stdin.type)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fcgiprotocol

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::fcgiprotocol::FCGI_Header> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fcgiprotocol::FCGI_Header>() {
  return ::fcgiprotocol::FCGI_Header_descriptor();
}
template <> struct is_proto_enum< ::fcgiprotocol::Header_Const> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fcgiprotocol::Header_Const>() {
  return ::fcgiprotocol::Header_Const_descriptor();
}
template <> struct is_proto_enum< ::fcgiprotocol::Conn_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fcgiprotocol::Conn_Status>() {
  return ::fcgiprotocol::Conn_Status_descriptor();
}
template <> struct is_proto_enum< ::fcgiprotocol::FCGI_Role> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fcgiprotocol::FCGI_Role>() {
  return ::fcgiprotocol::FCGI_Role_descriptor();
}
template <> struct is_proto_enum< ::fcgiprotocol::Protocol_Status> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::fcgiprotocol::Protocol_Status>() {
  return ::fcgiprotocol::Protocol_Status_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_protocol_2eproto__INCLUDED
